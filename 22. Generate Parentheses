public class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> list = new ArrayList<>();
        backtracking(list, "", 0 ,0 , n);
        return list;
    }
    
    private void backtracking(List<String> list, String str, int left, int right, int max) {
        if (str.length() == max * 2) {
            list.add(str);
            return;
        }
        if (left < max) {
            backtracking(list, str + "(", left + 1, right, max);
        }
        if (right < left) {
            backtracking(list, str + ")", left, right + 1, max);
        }
    }
}
